@using Ambacht.Common.Maps.Nts
@using Ambacht.Common.Maps.Projections
@using Ambacht.Common.Mathmatics

<MudText Typo="Typo.h4">Electoral map</MudText>
<MudGrid>
	<MudItem xs="9">
		
		<VectorMap 
			EnableMousePan="false" 
			EnableMouseZoom="false" 
			class="w-full aspect-[3/2] block"
			@ref="@_map">
			@foreach (var state in States.OrderBy(s => s == _selected))
			{
				<VectorGeometry 
					Value="@state.Geometry"
					Stroke="@(_selected == state ? "#222222" : "white")"
					StrokeWidth="@(_selected == state ? 2 : 1)"
					Fill="@state.Lean.GetColor()"
					Tooltip="@state.Name"
					EnableMouseEvents="@true"
					OnClick="@(() => Click(state))"	/>
			}
		</VectorMap>

	</MudItem>

	<MudItem xs="3">
		<MudPaper>
			@if (_selected == null)
			{
				<MudText Class="ma-4">Click on a state to display details</MudText>
			}
			else
			{
				<MudCard>
					<MudCardHeader>
						<CardHeaderAvatar>
							<MudAvatar>@_selected.Code</MudAvatar>
						</CardHeaderAvatar>
						<CardHeaderContent>
							<MudText Typo="Typo.body2">
								@_selected.Name
							</MudText>
						</CardHeaderContent>
					</MudCardHeader>
					<MudCardContent>
						<MudText Class="mb-4">Electoral votes: <strong>@_selected.ElectoralVotes</strong></MudText>
						@if (_selected.IsWinnerTakesAll)
						{
							<MudText>
								This is a winner-takes all state. All electoral votes go to the candidate that gets the most votes.
							</MudText>
						}
						else
						{
							<MudText>
								This state awards its electoral votes on a per-district basis.
							</MudText>

						}

						<MudSelect T="Lean" Value="@_selected.Lean" ValueChanged="@UpdateLean" Label="State lean" Class="mt-4">
							<MudSelectItem Value="@Lean.SafeD">Safe Democrat</MudSelectItem>
							<MudSelectItem Value="@Lean.LikelyD">Likely Democrat</MudSelectItem>
							<MudSelectItem Value="@Lean.LeansD">Leans Democrat</MudSelectItem>
							<MudSelectItem Value="@Lean.TossUp">Toss-up</MudSelectItem>
							<MudSelectItem Value="@Lean.LeansR">Leans Republican</MudSelectItem>
							<MudSelectItem Value="@Lean.LikelyR">Likely Republican</MudSelectItem>
							<MudSelectItem Value="@Lean.SafeR">Safe Republican</MudSelectItem>
						</MudSelect>

					</MudCardContent>
					<MudCardActions>
						<MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@(() => _selected = null)" />
					</MudCardActions>
				</MudCard>
			}
		</MudPaper>

	</MudItem>

</MudGrid>

<MudText Typo="Typo.h4">Electoral votes</MudText>
<div class="w-full">
	<HorizontalBarChart Items="@ElectoralItems().ToList()"  />
</div>

<MudText Typo="Typo.h4" Class="mt-4">Scenario modeling</MudText>
@if (_progress != null)
{
	<MudProgressLinear Min="0" Max="@_rounds" Value="@_progress.Value" />
}

@if (_result != null)
{
	<SimulationResults Value="@_result" />
}



@code {


	[Parameter()]
	public List<State> States { get; set; } = new List<State>();

	private Simulation.SimulationResult? _result;
	private double? _progress;

	private int _rounds = 1000;
	private VectorMap? _map;
	private State? _selected;


	private void Click(State state)
	{
		_selected = state;
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			var bounds = GetBounds();
			await _map!.Fit(bounds, true);

			await RunModel();
		}
	}

	private IEnumerable<HorizontalBarChart.Item> ElectoralItems()
	{
		var grouped = States.GroupBy(s => s.Lean).ToDictionary(g => g.Key);
		yield return CreateGroup(grouped[Lean.SafeD]);
		yield return CreateGroup(grouped[Lean.LikelyD]);
		yield return CreateGroup(grouped[Lean.LeansD]);
		yield return CreateGroup(grouped[Lean.TossUp]);
		yield return CreateGroup(grouped[Lean.LeansR]);
		yield return CreateGroup(grouped[Lean.LikelyR]);
		yield return CreateGroup(grouped[Lean.SafeR]);
	}

	private HorizontalBarChart.Item CreateGroup(IGrouping<Lean, State> grouping)
	{
		return new HorizontalBarChart.Item()
		{
			Title = GetTitle(grouping.Key),
			Value = grouping.Count().ToString(),
			Text = "white",
			Background = grouping.Key.GetColor(),
			Align = grouping.Key.Party().Align,
			Fraction = (double)grouping.Count() / States.Count,
		};
	}

	private string? GetTitle(Lean lean) => lean switch
	{
		Lean.SafeD => "Democrats",
		Lean.SafeR => "Republicans",
		_ => null
	};


	private async Task RunModel()
	{
		if (_progress != null)
		{
			return;
		}

		_result = null;
		var sim = new Simulation(19681, States)
		{
			Runs = _rounds
		};
		var start = DateTime.UtcNow;
		var count = 0;
		Simulation.SimulationResult? last = null;
		_progress = 0;
		StateHasChanged();

		foreach (var intermediate in sim.Simulate())
		{
			var duration = DateTime.UtcNow - start;
			if (duration > TimeSpan.FromMilliseconds(40))
			{
				_progress = count;
				StateHasChanged();
				await Task.Delay(TimeSpan.FromMilliseconds(40));
				start = DateTime.UtcNow;
			}

			count++;
			last = intermediate;
		}

		_result = last;
		_progress = null;
		StateHasChanged();
	}



	private async Task UpdateLean(Lean lean)
	{
		_selected!.Lean = lean;
		await RunModel();
	}


	private Rectangle<double> GetBounds()
	{
		var bounds = States.Select(f => f.Geometry).GetBoundingRectangle();
		return bounds;
	}


	private static Projection _projection = new AlbersUSA();


}
