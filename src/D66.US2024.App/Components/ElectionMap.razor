@using Ambacht.Common.Maps
@using Ambacht.Common.Maps.Nts
@using Ambacht.Common.Maps.Projections
@using Ambacht.Common.Mathmatics
@using NetTopologySuite.Features
@using NetTopologySuite.Geometries
<VectorMap 
			EnableMousePan="false" 
			EnableMouseZoom="false" 
		   class="w-full aspect-[3/2] bg-[#bbccee] block"
		   @ref="@_map">
	@foreach (var state in Lower48())
	{
		<VectorGeometry Value="@state.Geometry" Stroke="black" Fill="#eeeeee"/>
	}
	@foreach (var center in _coordinates)
	{
		<VectorMarker Center="@center" />
	}
</VectorMap>

@code {

	private VectorMap _map;
	private List<StateViewModel> _states = CreateStates().ToList();


	private static IEnumerable<StateViewModel> CreateStates()
	{
		var shapes = States.ReadShapes();
		var data = States.ReadData().ToDictionary(s => s.Code);
		return shapes
			.Select(s =>
			{
				var id = s.GetOptionalId("id").ToString();
				var result = new StateViewModel()
				{
					Geometry = s.Geometry,
					Code = data[id].Code,
					Name = data[id].Name
				};
				result.Geometry.Project(_projection);
				return result;
			});
	}

	private class StateViewModel
	{
		public string Code { get; set; }
		public string Name { get; set; }
		public Geometry Geometry { get; set; }
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			var bounds = GetBounds();
			Console.WriteLine("Fitting bounds: " + bounds.ToString());
			await _map.Fit(bounds, true);
		}
	}


	private IEnumerable<StateViewModel> Lower48() => _states.Where(f =>
	{
		var id = f.Code;
		if (id == "AK" || id == "HI")
		{
			return false;
		}

		return true;
	});

	private Rectangle<double> GetBounds()
	{
		var bounds = Lower48().Select(f => f.Geometry).GetBoundingRectangle();

		_coordinates.Clear();
		_coordinates.Add(bounds.Center().ToCoordinate());
		_coordinates.Add(new Coordinate(bounds.Left, bounds.Top));
		_coordinates.Add(new Coordinate(bounds.Right, bounds.Top));
		_coordinates.Add(new Coordinate(bounds.Right, bounds.Bottom));
		_coordinates.Add(new Coordinate(bounds.Left, bounds.Bottom));

		return bounds;
	}

	private List<Coordinate> _coordinates = new List<Coordinate>();

	private static Projection _projection = AlbersUSA.Lower48;


}
